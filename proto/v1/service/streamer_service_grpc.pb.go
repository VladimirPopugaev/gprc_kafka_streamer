// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: streamer_service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KafkaStreamerClient is the client API for KafkaStreamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KafkaStreamerClient interface {
	CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*CreateChannelResponse, error)
}

type kafkaStreamerClient struct {
	cc grpc.ClientConnInterface
}

func NewKafkaStreamerClient(cc grpc.ClientConnInterface) KafkaStreamerClient {
	return &kafkaStreamerClient{cc}
}

func (c *kafkaStreamerClient) CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*CreateChannelResponse, error) {
	out := new(CreateChannelResponse)
	err := c.cc.Invoke(ctx, "/kafka_streamer.KafkaStreamer/CreateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KafkaStreamerServer is the server API for KafkaStreamer service.
// All implementations must embed UnimplementedKafkaStreamerServer
// for forward compatibility
type KafkaStreamerServer interface {
	CreateChannel(context.Context, *CreateChannelRequest) (*CreateChannelResponse, error)
	mustEmbedUnimplementedKafkaStreamerServer()
}

// UnimplementedKafkaStreamerServer must be embedded to have forward compatible implementations.
type UnimplementedKafkaStreamerServer struct {
}

func (UnimplementedKafkaStreamerServer) CreateChannel(context.Context, *CreateChannelRequest) (*CreateChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedKafkaStreamerServer) mustEmbedUnimplementedKafkaStreamerServer() {}

// UnsafeKafkaStreamerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KafkaStreamerServer will
// result in compilation errors.
type UnsafeKafkaStreamerServer interface {
	mustEmbedUnimplementedKafkaStreamerServer()
}

func RegisterKafkaStreamerServer(s grpc.ServiceRegistrar, srv KafkaStreamerServer) {
	s.RegisterService(&KafkaStreamer_ServiceDesc, srv)
}

func _KafkaStreamer_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaStreamerServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kafka_streamer.KafkaStreamer/CreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaStreamerServer).CreateChannel(ctx, req.(*CreateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KafkaStreamer_ServiceDesc is the grpc.ServiceDesc for KafkaStreamer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KafkaStreamer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kafka_streamer.KafkaStreamer",
	HandlerType: (*KafkaStreamerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChannel",
			Handler:    _KafkaStreamer_CreateChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "streamer_service.proto",
}
